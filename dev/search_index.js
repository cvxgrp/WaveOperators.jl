var documenterSearchIndex = {"docs":
[{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"The source files for all examples can be found in /examples.","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"EditURL = \"https://github.com/cvxgrp/WaveOperators.jl/blob/main/examples/create-problem-data.jl\"","category":"page"},{"location":"examples/create-problem-data/#Mode-converter-design-setup","page":"Mode converter design setup","title":"Mode converter design setup","text":"","category":"section"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"We show how to setup the problem data to design a mode converter, as we do in Bounds on Efficiency Metrics in Photonics.","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"# Import the packages\nusing WaveOperators\nusing Plots","category":"page"},{"location":"examples/create-problem-data/#Constructing-the-design-region","page":"Mode converter design setup","title":"Constructing the design region","text":"","category":"section"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"First we set basic parameters of our design region and the simulation grid.","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"n = 50                                  # Number of gridpoints per unit length\nwidth, height = 2, 1                    # Width and height of the domain\nk = 2π                                  # Wavenumber of the domain\n\n# Construct grid\ng = Grid(height, width, 1/n, k);\nnothing #hide","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"Next, we add the waveguide slab, centered, of length height/2 and width height/3. We set the material contrast to be 5.","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"contrast = 5\nwaveguide = Slab(height/2, height/3)\nset_contrast!(g, waveguide, contrast)","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"Finally we define the design region itself, centered on the domain, of size 2/3*height by height.","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"d_height = 2*height/3\nd_width = width/2\nx_pos = height/2 - d_height/2\ny_pos = width/2 - d_width/2\n\ndesign_region = Rectangle((x_pos, y_pos), (d_height, d_width))\n\n# Set the maximum allowable contrast for the design region\nset_contrast!(g, design_region, contrast)\nheatmap(g.contrast, title=\"Design Region\")","category":"page"},{"location":"examples/create-problem-data/#Adding-an-input-field","page":"Mode converter design setup","title":"Adding an input field","text":"","category":"section"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"With our design region defined, we now add the input mode to the design region.","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"mode_input_position = 0\ninput_mode = 1\ninput_line = VerticalLine(mode_input_position)\nmode = add_mode!(g, input_line, input_mode);\nnothing #hide","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"We can visualize the amplitude of this mode.","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"modes = compute_modes(g, input_line)\nmode_in = modes.vectors[:, input_mode]\nplot(abs.(mode_in), grid=false, legend=false,lw=3, color=:black)","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"And the resulting field. (Note, we haven't designed anything yet!)","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"solution = solve(g)\nheatmap(abs.(solution))","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"For a nicer looking plot (like the ones we used in the paper), we can interpolate:","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"using Interpolations: LinearInterpolation\nfunction interpolate(img; factor=8, ylims=(0,2), xlims=(0,2))\n    xx = range(xlims..., size(img, 1))\n    yy = range(ylims..., size(img, 2))\n    itp = LinearInterpolation((xx,yy), img)\n    x2 = range(xlims..., size(img, 1)*factor)\n    y2 = range(ylims..., size(img, 2)*factor)\n    return [itp(x, y) for x in x2, y in y2]\nend\nheatmap(interpolate(abs.(solution)))","category":"page"},{"location":"examples/create-problem-data/#Defining-the-objective","page":"Mode converter design setup","title":"Defining the objective","text":"","category":"section"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"For a mode converter, we want to measure correlation with some predefined output mode at a target (in this case, the RHS of the domain.) See section 1.1 of our paper.","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"# Make a target line at the right hand side of the domain\ntarget_line = VerticalLine(width)\n\n# Generate the Green's function for the problem\ng_functions = generate_G(g, design_region, target_line)\n\n# Compute the desired output mode vector\nmodes = compute_modes(g, target_line)\noutput_mode = 2\nc = modes.vectors[:, output_mode];\nnothing #hide","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"The desired output mode is plotted below:","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"out_fig = plot(abs.(c), grid=false, legend=false, lw=3, color=:black)","category":"page"},{"location":"examples/create-problem-data/#Making-a-design","page":"Mode converter design setup","title":"Making a design","text":"","category":"section"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"We can use the tools in PhysicalBounds.jl to create a design. Below, we show how to use the optimal value of the optimization problem to set the design from our variable vector theta. Usually θ would be replaced by a real design. Here we use a 'random' design. See PhysicalBounds.jl for a complete example.","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"designidx = getindices(g, design_region)\nθ = rand(length(designidx))","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"Set the contrast to be the design's","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"g.contrast[designidx] .*= θ\nheatmap(g.contrast, title=\"Design Region\")","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"Solve for the new design's fields","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"solution_new = solve(g)\nheatmap(abs.(solution_new))","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"","category":"page"},{"location":"examples/create-problem-data/","page":"Mode converter design setup","title":"Mode converter design setup","text":"This page was generated using Literate.jl.","category":"page"},{"location":"api/#API-Reference","page":"API reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [WaveOperators]","category":"page"},{"location":"api/#WaveOperators.Circle-Union{Tuple{T}, Tuple{T, Any}} where T<:Tuple","page":"API reference","title":"WaveOperators.Circle","text":"Circle(position::T, radius) where T <: Tuple\n\nCreates a Circle at position with radius radius.\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveOperators.Grid-NTuple{4, Real}","page":"API reference","title":"WaveOperators.Grid","text":"Grid(height::Real, width::Real, h::Real, k::Real)\n\nCreates a height by width grid with discretization h and wavenumber k. This grid will define our problem domain.\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveOperators.HorizontalLine","page":"API reference","title":"WaveOperators.HorizontalLine","text":"HoriztonalLine(y2::Float64)\n\nCreates a horiztonal line (across the entire domain) at y position y.\n\n\n\n\n\n","category":"type"},{"location":"api/#WaveOperators.IntegralEquation","page":"API reference","title":"WaveOperators.IntegralEquation","text":"IntegralEquation\n\nThis object represents the physics equation\n\nz + Gmathbfdiag(theta)z = Gb\n\nin compact form. Specifically, G_design maps from the design region to the design region, and G_target maps from the design region to the target. By only dealing with the reduced form of the system, we avoid unnecessary computation. The reduced form of the physics is\n\nbeginaligned\nz^mathrmdesign + G^mathrmdesignz^mathrmdesign = b^mathrmdesign\nz^mathrmtarget + G^mathrmtargetz^mathrmdesign = b^mathrmtarget\nendaligned\n\n\n\n\n\n","category":"type"},{"location":"api/#WaveOperators.Rectangle-Union{Tuple{M}, Tuple{N}, Tuple{N, M}} where {N<:Real, M<:Real}","page":"API reference","title":"WaveOperators.Rectangle","text":"Rectangle(w::N, h::M) where {N <: Real, M <: Real}\n\nCreates a Rectangle at (0,0) with dimensions w by h.\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveOperators.Rectangle-Union{Tuple{U}, Tuple{T}, Tuple{T, U}} where {T<:Tuple, U<:Tuple}","page":"API reference","title":"WaveOperators.Rectangle","text":"Rectangle(position::T, shape::U) where {T <: Tuple, U <: Tuple}\n\nCreates a Rectangle at positionwith dimensionsshape. Both inputs are tuples of floats (Tuple{Float64, Float64}`).\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveOperators.ShapeSlice","page":"API reference","title":"WaveOperators.ShapeSlice","text":"ShapeSlice(shape::Shape, line::VerticalLine)\n\nCreates a vertical slice (defined by line) of shape.\n\n\n\n\n\n","category":"type"},{"location":"api/#WaveOperators.Slab","page":"API reference","title":"WaveOperators.Slab","text":"Slab(position::Float64, width::Float64)\n\nCreates a Slab (horizontal rectangle that strectes across the entire domain) at y position position with (vertical) width width.\n\n\n\n\n\n","category":"type"},{"location":"api/#WaveOperators.VerticalLine","page":"API reference","title":"WaveOperators.VerticalLine","text":"VerticalLine(x::Float64)\n\nCreates a vertical line (across the entire domain) at x position x.\n\n\n\n\n\n","category":"type"},{"location":"api/#WaveOperators.add_current!-Tuple{Grid, Any, Any}","page":"API reference","title":"WaveOperators.add_current!","text":"add_current!(g::Grid, positions, input)\n\nAdds excitation input to the grid g at positions positions.\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveOperators.add_current!-Union{Tuple{N}, Tuple{S}, Tuple{Grid, S, N}} where {S<:WaveOperators.Shape, N<:Number}","page":"API reference","title":"WaveOperators.add_current!","text":"add_current!(g::Grid, s::S, input::N) where {S <: Shape, N <: Number}\n\nAdds excitation input to the grid g at position s.\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveOperators.add_mode!-Tuple{Grid, WaveOperators.Line, Int64}","page":"API reference","title":"WaveOperators.add_mode!","text":"add_mode!(g::Grid, x, n_mode::Int)\n\nAdds mode number n_mode to the grid g at position x, which may be an x axis position or a VerticalLine.\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveOperators.compute_modes-Union{Tuple{V}, Tuple{Grid, V}} where V<:(AbstractVector{<:CartesianIndex})","page":"API reference","title":"WaveOperators.compute_modes","text":"compute_modes(g::Grid, x)\n\nReturns the modes of the excitation on the grid g.\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveOperators.generate_G-Union{Tuple{V}, Tuple{U}, Tuple{Grid, U, V}} where {U<:(AbstractArray{<:CartesianIndex}), V<:(AbstractArray{<:CartesianIndex})}","page":"API reference","title":"WaveOperators.generate_G","text":"function generate_G(g::Grid, design, target)\n\nGenerates the IntegralEquation  (Green's function G and excitations b) for the equation\n\nz + Gmathbfdiag(theta)z = Gb\n\nThe inputs design and target may be indices or shapes.\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveOperators.getindices-Union{Tuple{S}, Tuple{Grid, S}} where S<:WaveOperators.Shape","page":"API reference","title":"WaveOperators.getindices","text":"getindices(g::Grid, s::Shape) where S <: Shape\n\nGets indices (wrt the grid g) of the shape s\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveOperators.is_in","page":"API reference","title":"WaveOperators.is_in","text":"is_in(s::Shape, p::Position)\n\nChecks if p (a tuple (x::Float64, y::Float64)) is in the shape s.\n\n\n\n\n\n","category":"function"},{"location":"api/#WaveOperators.pos","page":"API reference","title":"WaveOperators.pos","text":"pos(g::Grid, x)\n\nReturns the position of x in grid \n\n\n\n\n\n","category":"function"},{"location":"api/#WaveOperators.set_contrast!-Union{Tuple{S}, Tuple{Grid, S, Any}} where S<:WaveOperators.Shape","page":"API reference","title":"WaveOperators.set_contrast!","text":"set_contrast!(g::Grid, s::S, val) where S <: Shape\n\nSets the contrast of the shape s in grid g to be val.\n\n\n\n\n\n","category":"method"},{"location":"api/#WaveOperators.solve-Tuple{Grid}","page":"API reference","title":"WaveOperators.solve","text":"solve(g::Grid)\n\nComputes the field on the grid g (an excitation should be added first).\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = WaveOperators   ","category":"page"},{"location":"#WaveOperators","page":"Home","title":"WaveOperators","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package contains utility functions to setup physical design problems[1], using an integral equation approximation to the Helmhotlz equation. While it was developed for computational bounds in photonics[2], we believe that these operators may be useful for anyone working on problems in physical design. To get started, check out the examples!","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more details on the methodology and performance tricks, please see appendices A & B of Bounds on Efficiency Metrics in Photonics.","category":"page"},{"location":"#Examples:","page":"Home","title":"Examples:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"examples/create-problem-data.md\", \"examples/simple-example.md\"]\nDepth = 1","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1]: Angeris, G., Vučković, J., & Boyd, S. (2021). Heuristic methods and performance bounds for photonic design. Optics Express, 29(2), 2827-2854.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[2]: Angeris, G., Diamandis, T., Vučković, J., & Boyd, S. (2022). Bounds on Efficiency Metrics in Photonics. arXiv preprint arXiv:2204.05243.","category":"page"},{"location":"examples/simple-example/","page":"Simple example","title":"Simple example","text":"The source files for all examples can be found in /examples.","category":"page"},{"location":"examples/simple-example/","page":"Simple example","title":"Simple example","text":"EditURL = \"https://github.com/cvxgrp/WaveOperators.jl/blob/main/examples/simple-example.jl\"","category":"page"},{"location":"examples/simple-example/#Simple-example","page":"Simple example","title":"Simple example","text":"","category":"section"},{"location":"examples/simple-example/","page":"Simple example","title":"Simple example","text":"This is a very simple example showing how to create a design region and add an input field.","category":"page"},{"location":"examples/simple-example/","page":"Simple example","title":"Simple example","text":"# Import the packages\nusing WaveOperators\nusing Plots\n\nn = 50                                  # Number of gridpoints per unit length\nwidth, height = 2, 1                    # Width and height of the domain\nk = 2π                                  # Wavenumber of the domain\n\n# Construct grid\ng = Grid(height, width, 1/n, k);\nnothing #hide","category":"page"},{"location":"examples/simple-example/","page":"Simple example","title":"Simple example","text":"First, we add the waveguide and visualize the design region.","category":"page"},{"location":"examples/simple-example/","page":"Simple example","title":"Simple example","text":"waveguide = Slab(height/2, height/3)\nset_contrast!(g, waveguide, 5)\nheatmap(g.contrast, title=\"Design Region\")","category":"page"},{"location":"examples/simple-example/","page":"Simple example","title":"Simple example","text":"Next, we add an excitation (here it is the second-order mode) and compute the resulting field.","category":"page"},{"location":"examples/simple-example/","page":"Simple example","title":"Simple example","text":"# Add excitation\nmode_input_position = 0\nmode_number = 2\nm = add_mode!(g, mode_input_position, mode_number)\n\n# Compute field\nsolution = solve(g)\nheatmap(abs.(solution))","category":"page"},{"location":"examples/simple-example/","page":"Simple example","title":"Simple example","text":"","category":"page"},{"location":"examples/simple-example/","page":"Simple example","title":"Simple example","text":"This page was generated using Literate.jl.","category":"page"}]
}
